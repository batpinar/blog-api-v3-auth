generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  created_at  DateTime  @default(now())
  deleted_at  DateTime? 

  posts       Post[]

  @@map("categories") // PostgreSQL'de çoğul snake_case
}

model Post {
  id           Int       @id @default(autoincrement())
  category_id  Int
  user_id      Int
  title        String
  content      String
  created_at   DateTime  @default(now())
  published_at DateTime?
  deleted_at   DateTime?

  category     Category  @relation(fields: [category_id], references: [id])
  comments     Comment[]
  user         User      @relation(fields: [user_id], references: [id])
  tags         PostTag[]

  @@map("posts") // PostgreSQL'de çoğul snake_case
}

model Comment {
  id             Int      @id @default(autoincrement())
  post_id        Int
  user_id        Int
  content        String
  commenter_name String
  created_at     DateTime @default(now())

  user           User     @relation(fields: [user_id], references: [id])
  post           Post     @relation(fields: [post_id], references: [id])

  @@map("comments") // PostgreSQL'de çoğul snake_case
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  posts PostTag[]

  @@map("tags") // PostgreSQL'de çoğul snake_case
}

// Yeni junction model ekliyoruz
model PostTag {
  post_id Int
  tag_id  Int
  
  post    Post     @relation(fields: [post_id], references: [id])
  tag     Tag      @relation(fields: [tag_id], references: [id])

  @@id([post_id, tag_id])
  @@map("post_tags")
}

enum UserRole {
  ADMIN
  MODERATOR
  MEMBER
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  username   String    @unique
  email      String    @unique
  password   String
  role       UserRole  @default(MEMBER)
  created_at DateTime  @default(now())
  updated_at DateTime? 
  deleted_at DateTime?

  comments     Comment[]
  posts           Post[]
  refresh_tokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime
  revoked_at DateTime?

  user       User     @relation(fields: [user_id], references: [id])

  @@map("refresh_tokens")
}
